---
resource_types:
- name: kubernetes
  type: docker-image
  source:
    repository: zlabjp/kubernetes-resource
    tag: "1.7"
resources:
  - name: repo
    type: git
    source:
      uri: git@github.com:making/ik.am.git
      branch: master
      private_key: {{github-private-key}}
#    webhook_token: {{webhook-token}}
#    check_every: 10000h
  - name: repo-version
    type: semver
    source:
      uri: git@github.com:making/ik.am-version.git
      branch: master
      private_key: {{github-private-key}}
      file: version
      driver: git
  - name: cf
    type: cf
    source:
      api: {{cf-api}}
      username: {{cf-username}}
      password: {{cf-password}}
      organization: {{cf-org}}
      space: home
      skip_cert_check: true
  - name: k8s
    type: kubernetes
    source:
      kubeconfig: {{kubeconfig}}
  - name: cflocal-release
    type: github-release
    source:
      owner: sclevine
      repository: cflocal
jobs:
  - name: unit-test
    plan:
    - aggregate:
      - get: repo
        resource: repo
        trigger: true
    - task: unit
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: maven
        inputs:
        - name: repo
        caches:
        - path: repo/m2
        run:
          path: bash
          args:
          - -c
          - |
            set -e
            cd repo
            rm -rf ~/.m2
            ln -fs $(pwd)/m2 ~/.m2
            ./mvnw test
  - name: deploy-to-nexus
    plan:
    - aggregate:
      - get: repo
        resource: repo
        trigger: true
        passed:
        - unit-test
    - task: deploy
      params:  &NEXUS_SNAPSHOT
        NEXUS_URL: {{nexus-snapshot-url}}
        NEXUS_USERNAME: {{nexus-username}}
        NEXUS_PASSWORD: {{nexus-password}}
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: maven
        inputs:
        - name: repo
        outputs:
        - name: build
        caches:
        - path: repo/m2
        run:
          path: bash
          args:
          - -c
          - |
            set -e
            cd repo
            rm -rf ~/.m2
            ln -fs $(pwd)/m2 ~/.m2
            cat > settings.xml <<EOF
            <settings>
              <servers>
                <server>
                   <id>repo</id>
                   <username>${NEXUS_USERNAME}</username>
                   <password>${NEXUS_PASSWORD}</password>
                </server>
              </servers>
            </settings>
            EOF
            ./mvnw deploy -s settings.xml -DskipTests=true -DaltDeploymentRepository=repo::default::${NEXUS_URL} -Dmaven.wagon.http.ssl.insecure=true -D maven.wagon.http.ssl.ignore.validity.dates=true
  - name: deploy-to-cf
    plan:
    - aggregate:
      - get: repo
        resource: repo
        trigger: true
        passed:
        - deploy-to-nexus
      - get: repo-version
    - task: download
      params:
        <<: *NEXUS_SNAPSHOT
      config: &DOWNLOAD_JAR_SNAPSHOT
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: maven
        inputs:
        - name: repo
        outputs:
        - name: build
        run:
          path: bash
          args:
          - -c
          - |
            set -e
            cd repo
            GROUP_ID=`grep '<groupId>' pom.xml | head -1  | sed -r 's/[ \f\n\r\t]+//g' | sed  -r 's|<.?groupId>||g'`
            ARTIFACT_ID=`grep '<artifactId>' pom.xml | head -1  | sed -r 's/[ \f\n\r\t]+//g' | sed  -r 's|<.?artifactId>||g'`
            VERSION=`grep '<version>' pom.xml | head -1  | sed -r 's/[ \f\n\r\t]+//g' | sed  -r 's|<.?version>||g'`
            URL=${NEXUS_URL}/`echo ${GROUP_ID} | sed 's|\.|/|g'`/${ARTIFACT_ID}/${VERSION}
            SNAPSHOT=`curl -k -s ${URL}/maven-metadata.xml | grep '<snapshotVersions>' -A 3 | grep 'value' | tr -d ' ' | tr -d '</value>'`
            echo "Download ${URL}/${ARTIFACT_ID}-${SNAPSHOT}.jar"
            curl -k -u ${NEXUS_USERNAME}:${NEXUS_PASSWORD} -L -J -O ${URL}/${ARTIFACT_ID}-${SNAPSHOT}.jar
            mv *.jar ../build/app.jar
    - put: cf
      params:
        manifest: repo/manifest.yml
        path: build/app.jar
        current_app_name: web
  - name: deploy-to-docker-registry
    plan:
    - aggregate:
      - get: repo
        resource: repo
        trigger: true
        passed:
        - deploy-to-nexus
      - get: repo-version
      - get: cflocal-release
        params:
          globs:
          - '*-linux'
    - task: download
      params:
        <<: *NEXUS_SNAPSHOT
      config:
        <<: *DOWNLOAD_JAR_SNAPSHOT
    - task: deploy
      privileged: true
      params:
        <<: *NEXUS_SNAPSHOT
        DOCKER_REGISTRY_URL: {{docker-registry-url}}
        DOCKER_USERNAME: {{docker-username}}
        DOCKER_PASSWORD: {{docker-password}}
        BUILDPACK: https://github.com/cloudfoundry/java-buildpack.git#v4.5.1
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: making/dcind-jdk
        inputs:
        - name: repo
        - name: repo-version
        - name: build
        - name: cflocal-release
        outputs:
        - name: output
        run:
          path: sh
          args:
          - -c
          - |
            set -e

            #export REPO=${DOCKER_REGISTRY_URL}/ikam/web
            export REPO=making/web
            export TAG=`cat repo-version/number`-`date +%s`
            echo "Building for ${REPO}:${TAG}"

            # Start Docker
            source /docker-lib.sh
            start_docker

            # Install tools
            apk add -q --update unzip curl tar gzip  && rm -rf /var/cache/apk/*
            curl -L -J -s -o cf-cli.tgz "https://cli.run.pivotal.io/stable?release=linux64-binary&version=6.31.0"
            tar -zxf cf-cli.tgz -C /usr/local/bin
            # curl -L -J -s -o cflocal.zip https://github.com/sclevine/cflocal/releases/download/v0.13.0/cflocal-0.13.0-linux.zip
            # unzip -q cflocal.zip
            chmod +x ./cflocal-release/cflocal-*-linux
            ./cflocal-release/cflocal-*-linux

            # Build image
            cp repo/local.yml ./
            cf local stage web -p ./build/app.jar -b ${BUILDPACK}
            cf local export web -r ${REPO}:${TAG}
            docker images

            # Push
            docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD} ${DOCKER_REGISTRY_URL}
            docker push ${REPO}:${TAG}
  - name: deploy-to-k8s
    plan:
    - aggregate:
      - get: repo
        resource: repo
        trigger: true
        passed:
        - deploy-to-docker-registry
    - task: configure
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: starkandwayne/concourse
        inputs:
        - name: repo
        outputs:
        - name: output
        run:
          path: bash
          args: 
          - -c
          - |
            set -e
            sed 's|docker.ik.am/ikam/web|making/web|' repo/k8s/web.yml > output/web.yml
    - put: k8s
      params:
        kubectl: apply -f output/web.yml
        wait_until_ready: 180
        wait_until_ready_selector: app=ikam-web
